{"version":3,"sources":["js/keyboardController.ts","js/constants.ts","js/vector.ts","js/point.ts","js/line.ts","js/geometry/geometry2d.ts","js/geometry/square.ts","js/geometry/circle.ts","js/character.ts","js/geometry/regularPolygon.ts","js/main.ts"],"names":[],"mappings":";;;;;ACAa,ADAb,IAAY,GCAC,CAAA,ODAb,KCAa,GAAe,GAAf;AACA,AIGb,AHFA,IGEA,AHFA,GDDa,CAAA,ECCb,IGEA,OJHa,GAAgB,GAAhB;AACA,AIEb,ALJA,AEEA,CFFA,MCEa,CAAA,GDFD,WAAZ,CCEa,CDFU,ECEQ,KAAlB;AIEb,ALHI,AECJ,EFDI,UKGJ,AHFA,CFDI,CAAA,WAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA;AKKA,ALJA,AEWA,EFXA,SKIA,AHOA,EFXA,CAAA,GEWA,CAAY,GGPZ,AHOA,EAAiC,CGPjC,CAAgB,ALJhB,CAAA,AEWA,EAAoD,CFXpD,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA;AACA,AEWI,EFXJ,MEWQ,KFXR,CAAA,CEWe,GAAP,KAAgB,EFXxB,CAAA,GAAA,CAAA,CEWI,EFXJ,AEWkC,CFXlC,CAAA,GAAA,GAAA;AKKA,ALJA,AEUoC,EGNpC,ALJA,UKIA,CAAA,ALJA,CAAA,QKIA,CAAA,ELJA,CAAA,EKIA,CLJA,CAAA,CKIA,ELJA,CAAA,CAAA,GAAA,GKIM,ALJN,KKIA,EAAmB,CAAI,CAAvB;ALHH,AILD,AMAA,APAA,ADeY,CFfZ,EAAY,CIAZ,AMAA,APAA,OCAA,AFeiB,CCfjB,CDeY,CFfW,AIAvB,CDAA,CDesB,CFfV,EEeA,KFfA,AUAZ,CVAY,EUAZ,ENAA,CAAA,ADAA,CAAA,KHAY,CIAZ,CAAA,ADAA,CAAA,EHAY,CUAZ,CAAA,INAA,CJAY,AIAZ,CJAY,AIAZ,ADAA,COAA,APAA,COAA,APAA,EAEA,OHFY,GAAW,EAAX,CAAZ,OUAA,CAAA,CAAA;ALQ2B,AHQf,WAAK,EAAL,GAAU,GAAV;AGJZ,ALPC,AIJD,AMAA,ARgBS,IEhBT,AMAA,CRaQ,IGFR,EHKe,CEhBf,GAAA,AMAA,GAAA,CLWA,MKXA,CAAA,INAA,CAAA,OAAA,CAAA,AMAA,CAAA,SNAA,CAAA,CAAA;ACGA,ALGA,AGJA,ADciB,CGbjB,EAAA,CLGM,AGJN,KAAA,CHIY,GAAmC;AAC3C,AINJ,AMAA,APCA,ADeY,IEhBZ,AMAA,GVMS,IEUQ,CQhBjB,CRgBY,EEhBZ,AMAA,CRgBsB,EFVF,AINpB,CJMqB,AEUT,CFXmC,KIL/C,CAAA,IMAA,CAAA,OAAA,CNAA,AMAA,CNAA,kBMAA,CAAA,CAAA,EACA;AVMI,AGNJ,ADgBY,OFVH,IEUQ,CChBjB,CDgBY,GAAU,EFVF,CAAC,AEUT,CFZmC;AAG3C,AINJ,ADII,ADaQ,IEjBN,GJMG,IGFL,ADaa,EAAL,EEjBK,CDIb,ADamB,CCbP,CHEI,AINA,ADIhB,CHEiB,AINrB,AFiBoC,CFdW,AGCpB,ADaU,CEfrC,ADEI,ADamB,ECba,CDaM,GAAa,CAAC,CAA5C;AFVR,AUPJ,APKQ,ADaI,IQlBZ,GVOS,EGFI,CAAL,COLR,ARkBiB,ECbA,ADaL,CQlBZ,APKQ,EDae,EFXH,CAAC,AEWe,CAAC,CAAd,GAAmB,GAAa,CAAC,CQlBxD,ARkBY,CQlBZ,OAAA,CAAA,SAAA,CAAA,CAAA;AVG+C,AIA/C,ADGQ,ADaC,CFhBT,EAOA,CIPA,CFMwD,CAWhD,EEjBR,CDGa,CAAL,GAAS,CAAT;AHKR,AIRA,AMFA,APMK,IONL,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,UAAA,CAAA,CAAA;AFLA,ARgBA,AITA,AFkBK,GAvBL,CMFA,AN2BI,QEpBJ,YIPA,GAAA,YAAA,CAAA,OAAA,CAAA,sBAAA,CAAA,CAAA;AJcI,AMRJ,APOI,EAAA,EOPJ,GPOI,CAAA,EOPJ,CNQI,EMRJ,ENQI,CAAY,CDDZ,CCCA,ADDA,ECCuB,EAAvB,EAAgC,ADDhC,GAAA,COPJ,CAAA,OAAA,CAAA,APOW,CAAP,EAAe,KOPnB,CAAA,CAAA;AFFA,ARcA,AIHQ,ADDA,IKVR,ARcA,KIHa,EAAL,ADDO,CKVf,EJWkB,CIXlB,CJWQ,ADDY,CAAL,KHIf,AGJ0B,CAAC,CAAC,CAAb,IAAkB,CKVjC,CAAA,GLUsC,CAAL,GKVjC,CAAA,CLU4C,CAAC,CAAC,CAAtC,MKVR,CAAA,CAAA;ARcA,AIFQ,AMTR,APQK,ADaM,EAAA,CCfP,CONJ,IRqBW,CEZE,AFYF,EEZH,CMTR,ENSkB,CMTlB,CNSQ,KFYG,GAAP,MQrBJ,CAAA,GRqBwB,IQrBxB,ARqBI,CQrBJ,CRqBsC,QAAlC,EAAkD,QQrBtD,CAAA,CAAA;AFFA,ARaA,AEWQ,IMxBR,ONwBe,CFXf,GQbA,ANwBmB,GMxBnB,GNwBe,CAAW,GMxB1B,CAAA,ANwB8B,CAAC,GAAL,CAAS,QMxBnC,ANwB0B,CMxB1B,ANwBe,EAA+B,IAAI,CAAC,GAAL,CAAS,QAAT,CAA/B,EAAmD,KAAnD,CAAyD,IAAzD,CAAP;AFLJ,AIPI,AMTR,APSI,ADaC,ECbD,CDWO,CQpBX,GPSI,CCAQ,ADAR,GHOA,CIPY,CAAC,EMTjB,CNSY,CAAS,ADAjB,COTJ,APSI,CCAmB,CAAC,CAAH,GAAO,EAAE,CAAC,CAAnB,ADAR,CHOA,EGPA,CHOA,AIPgC,CMTpC,CAAA,OAAA,APSe,COTf,APSI,CCAgC,CAAA,ADAb,WOTvB,CAAA,CAAA,ENSQ,EAA6C;AIXrD,ARcY,AIFA,ADAJ,IKZF,ILYM,CHEA,AGFC,GAAG,CAAC,CAAC,CKZD,ARcL,AGFI,GKZI,ARcC,AGFC,IKZE,CRcZ,AGFe,CHMvB,AGNI,CHGJ,KQfoB,CAAA,OAAJ,CAAW,CAAX,EAAc,CAAd,CAApB;AACA,AJYY,AMVZ,APUQ,ADaJ,EAAA,EMzBE,AEEN,IPUY,ADaR,CCbS,ADaT,EEba,CAAL,ADAI,CKZD,ALYE,CAAC,CCAG,ADAL,CKZE,ELYI,CCAV,CIZU,AEEtB,GAAA,APU2B,ADavB,CCbI,ADaA,IMzBc,CAAA,CNyBd,CAAA,KMzBU,CAAW,CAAX,AEElB,CAAA,CFFgC,ANyB5B,CMzB6B,CAAf,ANyBV,CMzBR,GEEA,CAAA,MRuBI,EAAa,mBQvBjB,CAAA,CAAA;AFDA,ARcY,AIFA,ADAJ,IKZF,KRcM,AEUR,EEZa,ADAF,CCAH,GAAS,ADAF,CKZD,ALYE,CCAG,CAAC,CIZH,AJYT,CDAG,CHEH,AGFa,CAAC,CKZD,CRciB,AEUtC,CCZyB,CHEjB,AGFa,GAAQ,CAAC,CKZT,CAAA,CLYY,CAAtB,CAAP,IKZa,CAAW,CAAX,EAAc,CAAd,CAArB;AACA,ARgBQ,AIJC,AMVT,APUK,ADYG,GChBJ,CKRE,ARgBE,AUdF,CNME,GMNE,ERsBE,CFRG,AIJA,AMVF,ARsBA,CFRG,GQhBC,AEEjB,CRsBkB,CFRV,CQhBY,ARgBE,IQhBE,INwBhB,EAAsB,EMxBN,CAAA,OAAJ,CAAW,CAAX,EAAc,CAAd,ARgBZ,CQhBR;AACA,ARgBK,AIJO,AMTZ,ARqBY,IMxBN,EEGA,CAAC,INSU,CAAL,CFYK,EMxBA,AJYI,CAAC,EIZF,AJYI,CAAC,CAAH,EIZE,CJYK,AMT7B,ARqBY,CQrBY,CNSO,CAAC,AFYF,CEZT,GIZG,AEGxB,ARqBkC,CMxBV,ANwBW,CEZG,AMTN,ENSQ,CAAC,AFYX,CEZQ,AFYE,EMxBpB,CAAW,AJYc,CIZb,CAAZ,AJY2B,AFYF,CEZG,CIZb,AJYd,AFYmB,CMxBpB,AJYR,AMToB,CFHhC,CNwBkD,KAAK,EAAf,GAAoB,KAAK,EAAL,GAAU,KAAK,EAA7C,CAAlB;AMtBZ,AJWY,AMTZ,APWI,ADUK,EQrBT,APWI,EKbE,GLaF,CAAA,COXG,CAAC,CNSS,CAAL,CIXG,EJWM,AMTrB,CFFkB,AEEJ,CFFd,AJWuB,ADEnB,CCFoB,ADEpB,CKbiB,AJWA,GAAQ,KAAK,AMTlC,APWI,CCFyB,EDEzB,CCFkC,EAAE,CAAC,CAA7B,KDEE,EAAV,EAA+B,CAA/B,EAAyC;AHGzC,AIJK,AMRT,APUQ,EHEJ,AUZJ,MPUY,EAAE,UHEV,CAAA,CUZJ,APU0B,COV1B,OVYI,AUZJ,APU0B,CHEtB,AUZS,APUa,IHEtB,AUZJ,GVYI,AGFI,EAA0B,UHE9B;AQfJ,ARgBQ,AIJH,AMPL,APSY,ADSJ,GE7BR,CIMM,AJcF,EMTA,EVWQ,IUXF,CVWO,AGFE,ADSJ,EQlBF,EPSU,CDSH,CFPZ,CQhBc,CRgBG,CGFN,CKdM,AEKJ,APSQ,CKdH,AEKJ,GVWS,CGFG,ADS1B,CCTqB,EHEM,CGFG,CKdH,CLcK,CAAC,CKdH,ARgBP,CQhBN,ARgBgB,AGFtB,COTN,CAAwB,APSQ,EKdF,CAA3C,ELckD,CAAL,EOThC,CAAb,APSsD,EAAE,CAAC,EAAtC,CAAP,IHEmB,CAAN;AQfzB,ARgBQ,AUXR,APSS,ADSJ,IMvBC,ARgBE,CGJA,ADMS,CQbb,GFLO,AEKJ,EVWQ,AGFA,CKdD,ARgBE,AUXN,EFLV,GRgBQ,CAAc,AUXN,CAAC,UAAP,CAAkB,IAAlB,CAAV,QVWQ;AACA,AUTR,APOY,MOPR,GVSS,IGFM,COPP,CVSJ,EUTO,APOQ,CHED,AUTN,CAAhB,CRUiB,EFDT,AGFW,CAAU,KAAK,CAAL,GAAS,EAAnB,EAAuB,KAAK,CAAL,GAAS,CAAhC,CAAP;AKZZ,ADdA,AEHA,AHEA,AN8BQ,AIJI,AMJZ,APMS,ECFG,EIXZ,ADdA,AEHA,AHEA,AN8BQ,EIJI,AMJN,CNIM,GE1BZ,AIsBU,EHrBV,AP6BgB,CQfhB,AFfA,AN8BiB,AURJ,EHrBb,CEHA,AL4BY,CAAA,AMJK,EDxBjB,SHEA,AIsBiB,CJtBjB,AN8BQ,AURS,CHrBjB,AP6BkC,CO7BlC,GEHA,CAAA,CHEA,AIsBa,CJtBb,AIsB2B,CHrB3B,CAAA,AP6BQ,AIJI,EJIiC,AURd,CDxB/B,AL4BI,CK5BJ,GHEA,AN8BkD,CM9BlD,CAAA,AIsB+B,CAAA,CHrB/B,CAAA,CAAA,AHyBmC,GJIU,CAAe,AIJxD,AMJuB,CDxB3B,ACwBqC,CDxBrC,AL4B6C,CK5B7C,CTgC6C,AURlB,CVQsC,CURvB,GVQG,AURlB,CVQnB,AURK,CAAb;AFPA,ARgBQ,AIJA,AMHR,APKK,ADCY,GCPb,ADOA,CFCI,EUPF,GAAG,GVOO,AUPJ,CVOK,AUNb,IAAI,QAAA,CAAA,GVMA,CAA0B,GUN9B,CAAW,GVMP,CUNW,CVMwB,KAAK,CUN7B,CAAA,KVMwB,CAAa,CUNzC,CAAU,EVMkB,CAAkB,AUN9C,EAAe,EVMa,CAAnC,AUNO,CAAX,EAAgC,GAAhC,EAAqC,GAArC,CADQ,EAER,IAAI,QAAA,CAAA,OAAJ,CAAW,IAAI,OAAA,CAAA,OAAJ,CAAU,GAAV,EAAe,GAAf,CAAX,EAAgC,EAAhC,CAFQ,EAGR,IAAI,gBAAA,CAAA,OAAJ,CAAmB,IAAI,OAAA,CAAA,OAAJ,CAAU,GAAV,EAAe,GAAf,CAAnB,EAAwC,CAAxC,EAA2C,EAA3C,EAA+C,CAA/C,CAHQ,EAIR,IAJQ,CAAZ;AFTA,ADbA,AEFA,AHCA,AN+BK,GAND,COxBJ,AEFA,AHCA,MGDA,EDeA,CCfA,GFEA,ADDA,GCCA,ADDA,SGDA,CAAA,KFEA,ADDA,CCCA,ADDA,CGDA,CAAA,KFEA,ADDA,CCCA,ADDA,IGDA,CAAA,CAAA,QFEA,ADDA,CCCA,ADDA,CCCA,ADDA;AEoBI,AEUJ,APEI,ADIA,ECJA,ADIA,KCJA,CAAA,ADIA,CAAA,EMhBA,AEUK,IAAT,EPEI,COFS,APET,ADIA,CAAA,CMhBA,CAAY,GLYZ,CDIA,ECJA,CDIA,CMhBA,EAA2B,MLYpB,CDIA,CAAP,CCJA,CDIgB,CCJI,GAApB,EAAgC;AKX5B,ADlBR,AEFA,AHCA,AN+BI,AUFA,APEI,ADIA,EFJJ,EO9BJ,AEFA,AHCA,AI6BI,IPEQ,CKZC,CDlBb,ADDA,AI6BU,APEI,COFH,CD9BX,CNgCgC,EMhChC,CNgCQ,CKZA,GAAgB,ARYpB,CAAA,OQZI,ECpBR,ATgCI,CShCJ,ATgCI,CUFA,CAA6B,IAA7B,CD9BJ,CAAA,CTgCI,GAAA,QShCJ,CAAA,CAAA,ATgCc,GAAV,EAA0B;AQXtB,ADnBR,ADDA,ANgCQ,AUFP,ARMO,SMhBK,ERYE,AEIA,KFJK,AEIA,EAAL,GMhBP,ENgBmB,CMhBC,ANgBA,CAAC,EAAd,CFJA,CAAkB,EEIE,IMhB3B,CNgBgC,CFJzB,CAA2B,AEIP,GFJpB,CAAP,CADsB,AEKiB,CFHvC,AEGwC,CAAC,EAAzC;AMfA,ADpBR,AEAA,AHDA,ANkCK,AGFG,ADKH,GFND,AEGA,COjCJ,IN+BY,CKXC,CDpBb,ADDA,IEqBQ,CLWW,CI/BnB,ADDA,CEqBqB,CDpBrB,AEAA,AHDA,AHgCY,KAAgB,KKXpB,MLWA,EAAiC;AKVpC,ADrB+B,AEApC,AHDoC,AIgCpC,APCY,EIhCwB,ADDA,IHiCxB,EAAE,GIhCsB,ADDA,AIgC3B,APCQ,CIhCmB,ADDA,GIgCpC,APCY,CODE,EH/BsB,ADDA,ECCA,ADDA,AIgCpC,EAA0B,IH/BU,ADDA,CCCA,ADDA;AGCpC,ATmCY,AUHR,APCQ,ADKR,EFHQ,AEGR,ICLQ,EODJ,ARMJ,CCLW,ADKX,COtCJ,ENiCkB,CODL,EPCD,CMjCZ,ACgCgB,CAAZ,CDhCJ,APsCI,CAAA,CFHQ,CAAA,CEGR,GAAA,KFHQ,CAAA,IEGJ,CAAJ,EAAa,EFHL,GAAR,UAAkB,KAAlB,EAAsC;AQZtC,ADlBA,AELwC,AHWxC,ANyBI,AGFC,ADKD,EMhBJ,ACvBwC,MToChC,GQbR,ADlBA,AELwC,AHWxC,ANyBW,AEGA,CMhBX,ACvBwC,EToC1B,EEGE,CKlChB,ADMA,CCNY,ADMA,AJ4BD,CFHQ,CAAC,CQbpB,ANgBqB,CMhBrB,ANgBsB,CFHR,AEGS,CKlCvB,ADMA,ANyBwB,CEGb,CKlCgB,AELa,AHWb,CEY3B,ADlBA,CELwC,APuCZ,CKlCQ,CCkBpC,CFZA,EAA0C,AJ4BT,COvCO,CAAA,AToC1B,AEGc,EFHxB,CEGkC,CI5BtC,AJ4BuC,CMhBjC,ANgBkC,CI5BgB,CJ4BpD,GMhBJ,EAAmB;AAEf,ADpBJ,ADMA,AIsBA,AROC,GAFD,KMbQ,ADpBR,ADMA,AIsBI,GFRO,EDpBX,ADMA,CEcc,EDnBV,ADMA,AIqBQ,GAAG,CAAf,EH3BI,ADMA,AIqBc,CH3Bd,ADMA,EEaA,EDnBA,ADMA,CCNA,ADMA,ICNA,ADMA,KCNO,ADMA,ICPX,ADMA;AGFA,AT6BI,AUJA,APCA,MODA,EVII,GS7BR,ACyBS,APCE,GODC,CVIG,CGHC,EODA,GVIK,AUJF,APCR,CHGW,AGHA,EAAX,CM1BX,AT6BqB,CS7BT,AT6BJ,AGHkB,GODtB,APCO,EHGqB,AGHD,CM1B/B,EAA2B,CN0BhB,EAA0B,EM1BrC,EAA0C,AN0B/B,CHGP,AGHA,EHGyC,OS7B7C,EAA8D,QAA9D,EAA8E;ADiB1E,ADlBA,AECJ,AHKI,ANyBI,AIJJ,AMAH,APCA,ADMD,EAAA,CCbA,CIrBI,ADMA,IEYI,ACjBR,AL0BQ,AFOR,CKlCQ,ADMA,AJ4BR,CKlCS,ADMA,CNyBI,ES9Bb,AL0Ba,CAAL,EG3BJ,AEEA,AHIA,EJ4BJ,CKlCkB,ADMA,AFqBC,AFOnB,EFHQ,CS7BJ,AT6BoB,CS7BpB,ALyBmB,CAAC,CG3BpB,ADMA,AFqBA,AFOJ,EOhCI,ALyBuB,CITnB,AChBJ,AT6B0B,AEG9B,CMhBQ,ARauB,GS7B3B,AT6B0B,CAAtB,GQbA,CAAG,AChBA,CPgCJ,GOjCP,EPiCA,EAAoB,CMhBZ,CAAa,oBAAA,CAAA,WAAA,CAAY,CAAzB,CAAJ,EAAiC;AAC7B,ADlBJ,ADMA,ANyBC,AIJG,AFOJ,IKlCA,ADMA,EEYI,GAAG,ADlBH,ADMA,CCNC,ADMA,CCNL,CCkBU,CJSC,CG3BF,CCkBI,ADlBb,ADMA,CEYc,CJSV,CErBS,AFoBU,CIRb,AJSO,CITC,GFZlB,MEYU,CAAN;AACH,AChBD,AHIA,ANyBH,AIJO,AMDR,APIA,ADII,ECJJ,CHLQ,CMnBJ,AIoBJ,GPIA,CM5BQ,AN4BR,ADIQ,CI5BA,AJ4BC,CI5BA,EIoBD,ARQI,COhCC,ECwBF,CDxBK,AHIZ,AJ4BY,COhCZ,AN4BJ,ADIiB,CCJjB,CM5BmB,AHID,AIoBlB,CRQY,CAAS,CAAC,ECJtB,CGxBI,EHwBJ,ADIY,CAAR,SCJG,GAAP,EAAoB,GAApB,EAAgC;AI9B/B,AEGO,AHKJ,AFoBC,ADGD,ADIA,KEVA,GEjBI,AHuBA,ADIA,CAAC,CCJC,CGvBC,AFoBA,CKzBG,APgCF,CCJgB,CGvBd,CFoBC,CKzBG,AN4Bd,ADIY,CAAC,EI3BC,CAAC,AFoBC,AFOR,COhCE,ALyBC,AFOM,COhCG,APgCF,II3BlB,AFoBsB,CFOd,CAAR,EEPW,IAAmB,IAAI,CAAC,CAAL,KAAW,IAAlC,EAAwC,QKzBrC,CAAN;ADgBJ,ACfC,AT6BG,AIL6C,AMArD,ARQI,EFHI,MQdA,CESW,ERQR,EQRQ,EAAA,ARQJ,GQRI,CAAA,CVKX,CAAA,AULW,ARQR,CAAW,CAAC,GQRJ,ARQO,EMjBlB,CAAA,AESW,CVKX,CAAA,AEGuB,CQR/B,CRQsB,CQRH,EFTX,AESW,ARQiB,CMjBzB,ANiB0B,CFH7B,CULW,CRQqB,CFHxC,GULmB,CAAA,ARQ0B,CMjBrC,CAAa,ANiBV,EAAsC,CAAC,CFHlC,AULhB,EAAmB,ARQkC,EQRlC,CVKnB,CULA,CVKoC,AEGsB,CQRlC,CRQyB,GAAc,CAAC,GMjB3C,ANiB8C,CMjB9C,INiBmD,EAA7D,CAAP,CAJgB,CAKhB,EMlBiB,CAAY,CAAzB,CAAJ,EAAiC;AAC7B,ADlBR,ADOI,ANyBA,AILI,AMDH,APID,ADMA,EKpCJ,ICkBQ,EDlBR,ADOQ,ANyBA,AGFA,CKZG,ADlBX,CG0BS,CJnBE,ANyBA,CQdG,EFXA,ANyBA,CQdG,ALYF,CKZG,AEQH,EH1Bf,AJ8BQ,CKZM,ADlBd,ADOkB,ANyBC,AUNJ,CFRO,AFXH,ANyBC,GOhCpB,APgCc,AGFU,CHEA,AUNT,CAAA,CH1Bf,ADOc,CAAY,AImBX,CAAV,IFRS,CAAN,CLYJ,CHEU,COhCT,ADOS,AHuBuB,CGvBD,ANyBhC,EOhCJ,EAAkC,CDOM,CAAC,KAA3B,EAAkC,CAAlC,CAAV;AEYC,ADlBD,AEGA,ALwBI,AMDJ,APII,ADMP,GAPD,CK7BI,AEGA,ECuBA,APII,CI9BD,CAAC,AJ8BE,CM3BF,CAAC,ALwBG,CDGC,CI9BT,AG0BM,CAAC,ENCM,ADGT,CM3BJ,ELwBsB,AMDtB,CDvBkB,ACuBL,GNCT,EMDJ,CDvBA;AFDA,AEEA,AHGA,AN0BA,AILI,AMDP,APIO,II7BJ,AEEA,EN2BI,CI7BD,CAAC,ADKA,AN0BA,CS7BA,AN2BG,CM3BF,ALwBG,CErBD,CHwBG,EGxBA,CGHV,AT6BW,AILE,ADGT,GM3Bc,ALwBF,CG1BhB,ADKc,CAAC,CN0BE,CO/BC,AP+BA,AILd,CKxBJ,ET6BiB,CM1BP,AN0BN,CM1BkB,CCLtB,GP+B4B,KM1BlB,CAAsB,CAAtB,EAAkC,EN0B5C,EAAyC,CM1BO,CAAC,MAAvC,CAAV;AEYA,ADhBA,AEEA,AT6BI,AGFH,ADML,EAAA,EKnCI,AEEA,GFFG,CCgBC,ADhBA,ALmCR,COjCQ,APiCR,COjCS,CT6BI,MO/BT,CLmCJ,CAAA,COjCI,GAAkB,CT6Bd,CAAmB,AEI3B,GMnBQ,ANmBR,CMnBQ,EReyB,CAAC,CS7B9B,ET6B6B,CQfzB,AReA,CQfG,GNmBX,MMnBQ,CAAa,oBAAA,CAAA,WAAA,CAAY,CAAzB,CAAJ,EAAiC;AAC7B,ADhBJ,AEEA,AHEA,AN2BC,AING,AMCR,ARSI,IKnCA,AEEA,ACwBJ,EFVQ,CDhBD,AG0BJ,CH1BK,ADIA,AIsBJ,CFVO,ACdH,CAAC,ALuBG,CGzBR,ADIO,AJ+BA,CMnBG,ADhBF,EDIE,CEYG,AJSA,AFUF,CMnBG,AJSA,CGzBD,AHyBL,AMCZ,CDxBI,ACwBU,CFVA,AFZI,AIsBlB,CFVsB,AFZH,CGFG,ACwBL,ARSN,CEVa,AMCxB,ARSsB,CKnCV,ALmCW,CKnCC,AG0BJ,CH1BhB,CDIU,AFqBN,CGzBmB,ADID,CFqBI,AFUF,COjCxB,CPiCO,CMnBG,CAAN,ADhBwB,ALmCA,CAAC,EQTb,CJtBN,AIsBM,CJtBgB,CCJT,ALmCW,CKnCC,CAAnC,ALmCO,CAAP,CKnCsC,ADIF,CAAC,ICJM,CAA3C,ADIU,AIsBd,EH1BkD,ADIF,AIsBd,CH1B9B,EAAiD,EDID,CAAC,CCJI,IAAI,AG0B3B,CH1B4B,ADIhD,AIsBoB,CJtB9B,CCJA,WG0BJ;AFTK,ADhBD,AEEA,AT6BH,AIP+B,AMGhC,APCI,ADOH,GFVO,AEQR,CKjCI,AEEA,ACyBJ,GH3BO,AG2BJ,CH3BK,AG2BJ,CDzBI,CAAC,CN0BE,CODX,EH3BI,CEEA,ACWkB,CAgBtB,APDgB,EM1BC,EAAb,CAX0E,ANqCnE,CMxBP,ANwBkB,IAAX,EAAiB,IAAjB,EAAuB,EAAvB,EAA2B,GAA3B,CAAP;AI1BA,AEGA,AHAA,AFoBQ,AMKZ,APDC,GAPD,CIpBI,ADGA,GCHG,CAAC,CDGA,CAAC,EAAL,AFoBY,CAAC,EGvBb,ADGU,CFoBM,GEpBF,EFoBN,IEpBM,CAAA,OAAJ,CAAS,GAAT,EAAc,GAAd,CAAV;AEYA,ADdH,AEGG,AHAA,AN2BI,AIPI,AMKZ,ARMA,EFJQ,AEIR,CK3CA,CDYI,IEWI,AJSI,AFWZ,CI/BQ,AJ+BR,CI/BS,EAAL,CFoBa,EEpBH,CFoBM,EFWpB,CI/BkB,AJ+BlB,CFJQ,AIPI,CJOJ,GEIR,CI/BkB,CAAA,CJ+BlB,CMpBQ,CAAA,CRgBA,CAAA,EM3BM,CAAS,EEWf,CAAG,AFXG,AJ+BR,EI/BsB,EN2BpB,CM3BM,CAAV,AJ+BJ,CFJA,CEIoB,CMpBZ,CAAa,ORgBF,GAAnB,EAAmC,QQhBd,CAAA,WAAA,CAAY,CAAzB,CAAJ,EAAiC;AAC7B,AFXJ,AN2BA,AIPQ,AMKZ,APCA,ADKI,ECLJ,EG1BI,EEWI,CLeR,CHCQ,AIPI,ADMZ,CKfW,AFXH,CAAC,CN2BE,AEIA,CMpBG,AFXV,CFoBa,CJOH,CQhBG,AFXH,AJ+BC,CMpBG,AJSE,CAAR,ADMZ,CAAA,CKfc,AFXI,AN2BC,CQhBG,CNoBX,CAAW,CCLtB,EG1BkB,CAAA,AH0BlB,CDK2B,EAAL,EMpBR,ARgBA,CQhBN,ARgBwB,AEIA,CI/BlB,CAAS,EH0BjB,CG1BQ,CJ+BH,CI/BiB,AN2Bd,CAA0B,AGDxC,ADKwC,EI/B1B,AH0Ba,CG1BvB,AN2BU,CAAV,CEIyC,CCL7C,CDKwC,CCLQ,EDKE,ECLlD,EAAsE,EDK3D,CAAP,CCLJ,EAA0F;AKdrF,ADdL,AEEI,AHCA,AN2BA,AIPK,AMKT,APCI,ADKH,EKlCD,CLgCA,CI7BI,ICHJ,AEEQ,AT4BA,AGDA,CI7BR,ADGQ,CAAC,CN2BE,AGDA,CG1BP,EH0BU,CG1BA,AN2BC,CAAX,CS5Ba,CFFjB,AP8BkB,AGDd,CI7BJ,ADGkB,CGDE,IAAI,CAAC,AHCP,CAAA,CGDE,IAAW,EHCjB,CAAS,CCHvB,CEEmC,CAAC,AHCtB,CCHd,CDG4B,GGDG,AHCjB,CAAV,EGDwC,CAAxB,EFFH,EEEgC,EFFjD,EAA2B,CEE0B,CAAC,KAAlD;AFDA,AP8BA,AUFJ,APCI,QAAI,CHCC,EGDE,GAAG,IAAV,GHCA,CAAkB,IAAlB,CAAuB,GAAvB,EAH+B,CAI/B;AQjBA,ADbA,AEEA,AHAH,AN6BA,AITO,ADOJ,ADKJ,EAAA,CFRQ,KSxBA,AN2BA,ADKR,CMrBS,ANqBT,CEZY,CAAC,ADOF,EM3BE,CDWT,AJSY,ADOF,EM3BE,CDWC,CLgBb,ADKJ,CEZqB,AFYrB,CMrBoB,AJSE,CITD,ACXD,ALoBZ,CKpBa,ALW8B,CAS1B,AFYzB,EMrBiB,CNqBjB,EMrB4B,ACXZ,CACP,IDUQ,CAAiB,ICXlB,APgChB,CMrBiB,ACTL,CDSR,ACTS,KAAI,CAAC,UAAN,GAAmB,CAFf,EAGJ,CAAC,KAAI,CAAC,UAAN,IAAqB,IAAI,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,EAAL,GAAU,KAAI,CAAC,KAAxB,CAAzB,CAHI,CAAZ;ADaA,ADdA,AG4BJ,APCI,ADKA,QCLI,ADKA,CMpBC,AEcU,EPCR,EODQ,ARMN,CCLC,CODK,EFdf,CEce,APCf,CODe,CFdC,CEcD,CRMX,GMpBiB,CEcN,CRMQ,CAAvB,CQNe,CRMW,EQN9B,CFdoB,CACK,AEaN,EAAA,CRMkB,EQNlB,IFdC,CACe,AEahB,CAAA,GRMW,CMnBU,EEaxC,EAAmB,CFdC,CEcD,CFZM,CEYzB,EAAwB,EFdJ,CAGQ,gBAHR,EAIQ,WAAA,CAAA,YAAA,GAAe,gBAJvB,EAKQ,gBALR,EAMQ,WAAA,CAAA,aAAA,GAAgB,gBANxB,CAAhB;AAQH,ADrBG,AEMA,AHJJ,AN6BQ,AIVA,AMMH,APGD,ADIA,EIhCJ,AN6BQ,CQnCR,KCUQ,AHJR,AH4BQ,CG5BR,CFmBY,AMMH,APGC,CCTG,AFaF,ECJE,CMxBC,ALeE,CAAC,AFaF,CQPA,CDrBE,CHJjB,AFmBoB,ADSF,CG5BlB,AIyBe,APGX,CHCI,CSzBa,ATyBb,AEGG,CAAW,CIhCtB,AFmByB,CAAC,AMMX,CNNC,AMMD,CJzBf,CIyBe,AROY,CEbI,AMM1B,CDrBgB,AP4BC,CO5BD,ATyBb,CAAA,CEGwB,CEbI,CAAC,CAA7B,CEnBH,AFS8C,CKLlC,ALeuB,AFaH,CO5BT,CHJ5B,EAAkC,EGIF,CAAC,ATyBzB,EEGG,CFHX,CEGgD,KAAK,CO5BpC,CP4B+B,CO5BH,CAA5B,ATyBK,CSzBlB,AP4BsD,EFH1D,EAAsC,CEGyB,SAApD,CAAP;AKhCA,AEKA,AHJA,AN6BA,AUJA,APGA,ADIH,GAHD,CI7BI,EIyBA,CJzBG,CGIC,AHJA,AN6BA,AGDA,EAAE,CHCC,CM7BP,AIyBM,CAAC,APGE,CHCC,GUJV,CAAY,APGE,CHCC,AGDf,EMxBiB,ACqBjB,GDrBoB,IAAI,CAAC,EAAL,ATyBV,CAAkB,ESzBE,KTyBpB,CAA0B,GSzBpC,ATyBU,CSlDgE,ATkD1E,CSzByC;ADgB7C,ADpBI,AEMA,AHJA,AN4BA,AIXI,AMOP,EFND,EFlBI,CIDkB,CA0BtB,CJzBO,CCFC,ADEA,AN4BA,GQVR,ARUW,CQVX,CJDe,CGnBD,AP8BA,CAAV,EO9Ba,AP8BA,AIXE,EEjBf,EEkBJ,ADpBqB,CCoBrB,AFlBsB,EFiBH,CAAA,CICnB,EFlBI,CEkBJ,ADpBqB,CAAA,EHmBN,CAAU,CAAV,EAAa,CGnBX,AHmBF,CGnBa,AHmBpB,CICH,GAAL,ADpBgC,CAAC,CCoBC,CDpBjB,EAAoB,IAAI,CAAC,EAAzB,CAAb;ACqBA,ADpBA,ADEA,AN4BA,AIXC,ADUD,ADOJ,EAAA,EMhBI,AFlBA,CFKO,EIaJ,AFlBA,CEkBC,ADpBA,ADEA,AH2BA,ADOR,CFNS,AEMT,EEjBW,IDUI,EKTX,ADpBa,CDEb,AJkCJ,CIlCmB,AH2BX,ADOR,CMhBoB,ADpBA,CP8BhB,CAAkB,EM5BE,AH2BC,ADOzB,EMhBI,ADpBsB,CAAC,ALoC3B,CFNI,CAAyB,CM5BV,CCFC,ADEW,CAA3B,AN4BA,CO9BA,CDE8B,AN4BA,CAA9B,AGDI,EHF8B,AEShC,CFLF,CM7BmC,AH2BC,CDOxC,EAAmB,GIlCe,AJkClC,CIlC8C,AH2BC,CG3B3C,AJkCkC,EIlCW,CH2BT,IG3Bc,CH2BG,IG3BrD,EAAyD,KAAK,AH2B9D,EAAkE,IG3BlE;AEmBA,ADpBA,AEKA,AHFA,AN4BH,AIZO,ADUA,ADOJ,GFVI,CQNJ,AFjBA,GEiBG,AFjBA,CEiBC,ADpBA,ADGA,AJiCA,EEjBI,CKdD,ALcE,CFiBD,EKpCE,AHmBE,CEhBZ,AFgBa,AFiBa,CMhB1B,ACfW,CDeG,ADpBD,AEKD,CP+BZ,CEjBiB,CAAC,CGnBD,AHmBJ,CICM,ACfZ,CAAW,CLcI,KGnBL,AEKV,ALcoB,CICb,ADpBG,AHmBL,CICgB,CAAd,ACfa,GDeK,AJDC,EGnBpB,AEKkB,CFLP,AEKQ,ELcM,CAAL,CGnBL,CAAC,AEK7B,CLc0C,CGnB7B,AEK0B,EFLN,CHmBa,CAAC,CAAnC,CICZ,AJDI,CGnBkC,CCoBY,KAAK,ADpB1C,CAAb,OCoBkD,CAAc,CAAd,GAAkB,gBAApE,EAAsF,SAAtF,EAAiG,SAAjG;AAEA,ADrBA,AEKI,AHFP,AFgBO,AMMR,APIQ,ADOJ,GIxCJ,CEyBI,AEIJ,EPIQ,CKRD,CAAC,ADrBA,ALoCA,CCPG,CMxBC,ALcA,CAAC,AMMN,CHzBK,AGyBJ,APIM,ADOF,EEjBI,CGnBD,AHmBE,AFiBa,CQXlB,APIJ,CKRJ,AEIS,CNNO,AFiBa,CO/BZ,CDgBD,CDrBC,CAAC,AEKE,AP+Ba,CEjBZ,CAAT,CGnBD,AGyBR,CFJH,ADrBsB,ALoCtB,CO/ByB,ALcA,AMMN,CDpBO,ECoBvB,EHzBQ,AHmBmB,AMMN,CNNpB,EMMD,CHzB6B,AGyBpC,CDpBwB,CAAgB,IFLE,CAAC,CEKnB,CAAhB,OFLJ;ACsBA,ADpBA,AP6BR,AIXY,AMOR,APGQ,IKRJ,ELQI,CKRD,CAAC,ADpBA,AGyBJ,CVIR,AGDe,GOHX,APGc,CI5BD,AHkBE,CMOL,EFLN,ADpBY,AJ4BR,CKRS,AJFE,GGlBC,AGyBJ,CHzBK,AGyBJ,CFLK,CDpBN,CAAQ,AHkBL,CAAA,EJWvB,GQTqB,CAAc,CAA3B,AJFW,CGlBC,AHkBS,CIES,ADpBA,AHkBnB,EAAa,CAAb,CAAP,CIE+B,GEK7B,CHzBiC,AGyBJ,CHzBK,GCoBV,AEKxB,CFLsC,CAA5C,ADpB8B,CAAgB,CCoBC,CAA/C,EAAkD,ADpBpB,CCoB9B,ADpBY,CAAZ;ACqBH,ADnBG,AEEI,AHDR,AN1BJ,AIyCmC,AMQlC,APGW,ADMJ,CF1DR,CM0BI,CEYA,ARtCJ,AULgC,CAwDhC,EDxBY,ANyBA,EI3BA,ADCR,AJgCQ,CKjCC,ADCT,AH0BW,EMzBC,CFFA,AEEC,ANyBC,GDMC,CCNP,CI3BS,AEET,CAAW,AHDnB,AJgCQ,CIhCR,GGCQ,CFFI,AEEY,AP+BA,CKjCA,GEEI,MAAA,CFFhB,AEEgB,AP+BxB,CKjC+B,ADCnC,CJgCqC,EIhCrC,ECDY,CAAR,AEEoB,CAAS,KAAT,CHDP,CGCuB,GHDxC,EAA2B,IGCH,CAAhB,EAFmC,CAInC;AFFJ,ADAA,AFeC,ADWG,ADMA,MCNA,ADMA,EKhCA,CAAC,AJ0BE,CDMC,EKhCA,AJ0BE,CDMC,GCNP,CI1BS,ALgCT,CKhCJ,EAAgB,OAAO,IAAP,CAhBO,CAkBvB;ACiBJ,ADhBI,ADFA,AN0BR,AIXK,ADWI,ADMG,EMdR,CJpCQ,CJ4CN,AIjEN,CAwDI,CFeQ,IAAI,CMdZ,CAAA,ARQU,CEMK,EFNF,CEML,GFNS,EQRjB,CAAA,eRQa,CQRb,CRQJ,EQRI,UAAiB,IAAjB,EAA2B;AACvB,ACjBI,AHDJ,AN2BR,AIVI,AMMJ,ARSS,MO/BG,CT0BZ,CM3BY,AN2BZ,EM3Bc,CEkBC,ACjBE,ACsBR,EJvB2B,CGChB,AHDiB,CEkB7B,ARSR,GM3BoC,AN2BrB,AUJf,CAAiB,CJvB0B,GGC/B,CHDwB,CIuBpC,CJvBiD,AN2BjD,CUJgC,GJvBI,EAAmB,GIuBvD,CJvBoC,CAA5B,AIuB0C,OAAlD,EAAmE,WAAnE,EAAuF;AFJlF,ADjBG,AEAI,AHDJ,AIuBJ,APEI,GKTJ,CFhBI,EGCI,AHDF,CAAC,CCCC,ADDF,AIuBF,APEI,CGzBJ,AIuBC,EPEM,CIxBC,AEAE,AHDF,CCCC,EEAI,CFAT,ADDQ,AHyBA,CIxBC,ADDA,CCCC,EGsBlB,APEQ,CIxBa,AEAE,CAAC,ACsBN,EPEM,EIxBE,AJwBA,CIxBlB,CEAS,CAAc,ANwBF,CMxBG,CFAD,CAAvB,AJwBJ,CGzBQ,CAAsB,AHyBA,EIxBE,GDDG,CCCC,CAAC,ADD7B,CAAR,CGCa,CAAT,CANmC,CAMK,QFAZ,CAAmB,KAAnB,CAAhC,EAA2D,OAAO,KAAP,CApBpC,CAoBkD;AAEzE,AEDC,AHDD,AIuBA,APEI,ADMJ,II/BA,EAAE,AIuBF,APEI,CGzBD,CAAD,AHyBI,ADMF,CI/BJ,EHyBS,CGzBD,AJ+BA,ECNJ,EGzBQ,CAAC,AIuBF,ARQE,GQRC,CRQV,GQRc,CRQG,KAAK,EQRR,CJvBV,AIuBU,CJvBY,KAAK,AJ+Bd,CQRP,CJvBN,AIuBiB,CJvBzB,AIuBc,ARQwB,EQRV,CAAd,CAAd,ARQA,EAA4C;AMXpD,ADhBQ,ADHA,AFeJ,AMQC,APEI,ADMG,EEhBR,EEfI,CIoB+E,APG/E,CGvBE,AFeN,AMSA,CJxBO,AFeP,CEfM,CEmBV,AFnBQ,EHyBO,CGzBC,CJ+BG,ECNA,CGzBC,AFehB,CEfiB,AFejB,CIIJ,ALMsB,ADME,IAAL,CCNQ,EDMI,ECNZ,GDMA,CCNgB,ADME,EI/BrB,AFeZ,ADUiC,CGzBC,CJ+BnB,CEhBf,ADUoC,ADM5B,GI/B+B,AHyB5B,EGzBC,AHyB6B,CGzBrC,IFea,IAAjB,EAA2B;AIhD/B,ADqCQ,ADHA,AFgBA,ADSI,ADMH,CMjET,EAAA,CFkCQ,CJ6BA,CI7BE,AHyBE,CGzBD,CAAD,AFgBE,ADSE,CGzBN,EHyBS,ADMF,CI/BC,AFgBA,EDSJ,CCTO,AFeA,CI/BC,CAAC,EJ+BE,CEfC,IFeI,IAAT,IAAiB,CI/BpB,CAAsB,GJ+BG,EI/BE,EAA3B,CAAR,AFgBW,CEvBY,AFuBgB,CEfvC,EJ8B4B,CEfjB,CAAX,CFe6C,IAAtC,EAA4C;AK3BnD,AEJH,AHEG,AFeA,ADSC,ADMG,QEfA,CAAC,IAAL,AFeW,EEfA,GFeK,IEfE,AFeP,GAAY,CEfZ,CAHY,CAKvB,EFaW,CAAkB,IAAlB,CAAP;AEZJ,AMIJ,ARSK,IQTL,CROW,EQPR,CAAC,GRSO,CQTX;AHnBI,AEHJ,AHCI,AFkBA,AMIJ,APEI,ADOI,EOhCR,ECuBA,GAAG,CHpBK,AGoBJ,APEI,GGxBG,AHwBA,EDOI,EI/BA,CGDf,AHCgB,AHwBA,CMzBhB,APgCQ,CI/BG,CCEQ,ADFA,AIsBnB,CPEQ,EItBc,AGoBJ,EPEM,EItBE,AEH1B,ANyB0B,CItBC,AEH3B,ECuBA,APE6B,CGxBlB,CCEW,AEHtB,AHC+B,CCEC,AJsB5B,CGxB6B,CGDjC,AHCkC,AHwBC,GItBE,CAAL,EDFD,CCEU,ADFA,GGDpC,EFGyC,CAAd,AEHhC,EAAkC,CFGgB,CAAC,ADFT,CAAD,ECEa,ADFM,CCEtC,CAAlB;AACA,AEHA,AHCI,AFkBJ,AMIJ,APEQ,ADOH,IOhCD,ACuBJ,EPEQ,CMzBD,ACuBJ,CHpBK,AEHA,ACuBJ,APEM,GAAG,CMzBT,CHCW,CAAC,AHwBR,GOFR,CHpBkB,CDFG,CIsBL,CHpBK,AGoBrB,EJtBQ,GCEkB,CAAC,SAAN,CAAgB,SAAS,CAAC,KAAV,CAAgB,WAAhB,CAAhB,CAAjB;AACA,AEFA,AHAC,AFmBD,AMGJ,APEK,ADOJ,GAdD,COjBI,ACsBJ,CJxB+B,AHwB3B,CGxBO,CGEJ,AHFH,AIwBD,CHpBK,AEFA,ACsBJ,GPEO,IAAI,EOFf,CHpBkB,AJsBA,CMxBd,CCsBY,CHpBK,CEFC,CNwBC,GItBG,CAAC,AJsBZ,IMxBX,ANwB2B,EAAE,GItBZ,AJsBe,CItBC,EJsB1B,EAA+B,KItBI,AGoB9C,CHpB+C,KAAV,CAAgB,CAAC,WAAjB,CAAhB,CAAjB;AAEA,AEFA,AHDH,AIuBD,APCQ,GGrCR,CGcI,ENuBI,CMvBD,CAAC,ACsBJ,APCM,GIrBC,AJqBE,EODJ,CPCD,CIrBO,CAAC,AGoBJ,CDtBR,CFEO,CAAQ,CGoBH,IAAI,CAAC,EAAT,GHpBD,AGoBe,CHpBK,CAAE,MGoBjC,IHpB+B,EAAc,UAAd,EAA2B,MAA3B,CAAkC,UAAA,CAAA,EAAC;AAAI,AEDlE,ALiBA,AMMJ,APAK,ADOL,EAAA,EO9BI,GAAG,CAAC,ALiBA,AMMJ,AROJ,CAAA,CEbU,GGhB4D,AHgBzD,CKjBT,CAAW,CCuBH,CHtB8D,AHgBzD,CGhB0D,AL6B3E,CQPe,AROf,CO9BoB,EP8BpB,CQPA,EDvBe,ALiBE,AFajB,CO9B0B,ALiBT,CKjBF,EAAc,EFCyC,AEDvD,CFC0E,AEDzD,CFCsC,AEDlE,ALiBS,CGhByD,AHgB9C,CKjBW,AP8B/B,IEbyB,CKjBW,CLiB3B,AFab,EEbiC,AFaf,EO9BiB,CAAW,CAAX,CLiBG,CKjBW,CLiBpC,CKjBsB,ALiB/B,CKjBgD,CAAhD;AFCuF,ADF/F,AFmBQ,AMMJ,AROI,KK9B2B,CAApB,CAAP,CHiBI,AMMJ,CJzBR,EJgCe,GQPD,CJzBd,AJgCmB,EQPF,ENNM,EMMnB,AROW,CEbW,AFaA,EEbE,CAAC,EFaE,CEbL,CAAO,AFaP,EEbA,CAAlB,AFa4B,MAAM,CAAC,EAA5B,EAAgC,KAAK,EAAL,GAAU,MAAM,CAAC,EAAjD,CAAP;AK7BH,AEDG,AHvDR,AFyEQ,ADKA,ADQH,CItFL,CAAoC,CCwBhC,AL4DA,CAvFJ,CA2FI,GEfQ,CKlBC,ENuBE,EMvBE,CAAC,AHvDkB,CAAA,AH8EjB,EMvBE,ALkBA,CKlBb,EAAgB,ALkBA,ADKT,CMvBU,ANuBA,CG9EzB,AFyE0B,CEzE1B,AFyE2B,ADKZ,CMvBa,CNuBC,CCLL,CAAO,ADKhB,CAAP,CMvByB,ELkBE,GKlBP,CAAW,ILkBJ,CAAA,CKlB3B,EAAuC,CAAC,EAAxC,CLkBuB,CKlBqB,ALkBV,KAAK,EAAhB,EAAoB,IAApB,CAAP,CAAhB,CAbuB,CAcvB;AKlBI,ALmBJ,AMIJ,APAC,ADUD,GCrCA,CAtDJ,CAmFI,CMzBQ,GAAG,ACuBN,CDvBO,GCuBH,CAAC,EDvBF,CAAW,ACuBN,CAAb,EAAgB,CAAC,CDvBO,ECuBJ,GDvBD,CAAW,CAAX,EAAc,CCuBjC,CDvBmB,CAAiB,ACuBN,CDvBtB,ACuBuB,EDvBQ,ACuBvC,EAAmC,GDvBS,KAAL,CAAW,CAAX,EAAc,EAAd,CAAiB,CAAhD;AFCZ,AEAS,ALmBD,AMIA,SHvBR,CGuBY,KHvBZ,IGuBqB,GAAG,CAAC,GAAG,KAApB,CAD+B,CAE/B;AHhFR,AH4EQ,CG5ER,CAAoC,YAAA,CAAA,OAApC,CAAA;AEyDQ,ALoBA,AMIA,APAJ,ADQA,ECRA,ADQA,EOhCI,GAAG,ANwBP,CMxBQ,ANwBR,ADQA,CAAA,CQRQ,IDxBJ,CAAW,CCwBD,CPAd,CAAA,ADQA,CQRiB,ARQjB,COhCoB,KAAL,CAAW,CAAX,EAAc,ANwB7B,ADQA,CQR4B,CDxBb,ACwBc,CDxBG,ANwBhC,ADQA,COhCI,EAA+B,ECwBlB,CAAmB,EDxBI,ENwB5B,ADQD,GOhCwB,CAAW,CAAX,ACwBlB,CAAb,APAJ,CMxBiD,CNwBtB,CMxBQ,CAAiB,CAAhD,APgCJ,EAA8B;AO/B1B,ALoBA,AMIA,APDJ,ADSI,IOhCA,GAAG,CAAC,ANuBR,EOCQ,CRQG,ECTX,CMvBI,ACwBQ,EPDZ,ADSgB,CQRD,ERQJ,CCTX,ADSoB,GQRC,CAAC,ORQX,EQRI,CAAiB,CRQG,KQRG,CAAC,KAAP,ARQc,CQRD,ARQE,OQRf,CAAjB,CRQX,CQRmD,KAAxC,CAA8C,WAAA,CAAA,YAA9C,EAA4D,WAAA,CAAA,aAA5D,CAAX,CAJ+B,CAM/B;ADxBA,ALmBA,AFYH,GAFD,CO7BI,GAAG,CAAC,OAAJ;AACH,ALmBG,AMKA,APHA,GMnCJ,KNmCQ,EOGA,IPHM,CAAC,MAAP,COGY,GAAoB,CPHd,CAAtB,EOGA,APHyB,OAAO,IAAP;AOIzB,APHA,ADUJ,EAAA,MCVQ,ADUR,CAAA,CQPQ,IPHM,CAAC,GDUf,CAAA,ECVQ,KOGgB,APHE,CAAtB,EOGuB,APHE,ADU7B,GAAA,ICVoC,COGhC,KPHsC,CAAC,CAAD,ADU1C,CCV6B;AMpB7B,ALkBI,ADIA,ADSA,EO/BJ,MLkBQ,ADIA,GDSG,KO/BX,AP+BgB,CO/BhB,ALkBiB,GAAG,CAAhB,ADIiB,ECJE,CDIC,CAAC,CMtBzB,ANsBI,ADSO,CO/BX,AP+B2B,GEbG,IAAP,CAtBI,AFmChB,CEbyB,AFahC,OO/BJ,GAAA,UAAiB,IAAjB,EAA2B;AACvB,ACuBA,APDA,ADSH,GAFD,CCPI,MAAM,COCa,APDZ,GAAP,COCmB,APDR,EOCQ,GAAA,CAAA,EAAA,EPDR,CAAA,EOCQ,APDP,GOCO,GAAnB,EAAmB,EAAA,GAAA,KAAA,CAAA,MAAnB,EAAmB,EAAA,EAAnB,EAAwB;ADtBxB,ALiBA,AMKK,APDW,QCJZ,IMKK,CPDO,ICJH,CMKE,APDK,CAAC,CCJL,CMKD,KAAA,CAAA,EAAA,APDC,COCX,APD2B,CCJhC,ADIgB,CAAA,CCJa,OAAO,IAAP,CAvBN,CAuBmB;AKhB1C,ACsBI,APF8B,ADWtC,EAAA,GCXI,EAAoC,CMpBhC,AP+BR,CAAA,CO/BU,ECsBE,CDtBoB,ANoB5B,CAA2C,IMpBV,ACsBnB,ARSlB,CAAA,IO/BgC,ACsBT,CDtBoB,ANoBK,GMpBhB,ACsBxB,APFuC,CMpBA,CCsBlB,APFwB,ADWrD,CCX+C,EAAS,ADWxD,CCX+C,EAAU,GMpBV,CAAA,EAAC,GP+BhD;AO/BoD,ALkBhD,AMKI,APFA,ADWJ,QEdI,EAAE,ADGE,CAAC,ADWF,CQTC,CDvBwC,ALkBvC,CDGG,EOEA,ARSA,COhCwC,ALkBvC,ADGT,CMrBiD,CCuBtC,APFE,MCHJ,AMKQ,CNLR,AMKS,ARSf,CAAgB,MEdd,CKlBuC,ALkB5B,CKlBkD,APgC/D,COhCyC,APgChD,COhCgD,CLkBxB,CAAC,EAAhB,CMKM,CNLc,AMKU,INLN,AMKU,CNLT,EAAzB,CAAT,EMK2C,CAAA,OAAJ,CAAS,MAAT,EAAiB,IAAjB,CAAxB,CAAX;ADvBoE,ALmBxE,ADGQ,ADWX,GAFD,EO/BgC,CAA5B,CAHuB,CAIvB,ALkBI,ADGI,WCHO,EDGM,CCHH,EAAE,ADGI,CCHH,ADGb,GCHU,CAAO,EAAP,CAAlB;AKjBA,ALkBA,AMII,APDI,QCHJ,IMII,GPDO,COCX,APDI,CCHK,CMIC,ENJE,EAAE,CAAC,GAAH,CAAO,IAAI,QAAA,CAAA,OAAJ,CAAW,IAAI,CAAC,EAAhB,EAAoB,IAApB,CAAP,CAAhB;AMKQ,APDH,ADWT,EAAA,KCdQ,CDcR,CAAA,ICXe,KDWf,CAAA,QAAA,GAAA,YAAA;AOhCI,ALkBA,AMKQ,APDA,ADWR,QEfI,GKlBG,APiCA,GQVK,CDvBD,ANsBI,CMtBH,CLkBC,AFeF,COjCJ,ANsBC,CMtBO,GLkBG,AFeF,CEfhB,CFeO,CEfc,AMKE,ERUL,CQVQ,EDvBnB,CAAoB,APiCpB,EOjCsB,CAAC,ACuBE,ARUT,CQVU,IRUL,COjCD,CAAU,APiC9B,GAAuB,CQVJ,CAAkB,CRU5C,GQV0B,CDvBY,ACuB9B,CDvB6B,EAAmB;AACpD,ALkBA,ADIC,ADWR,GAFD,UO/Be,ALkBA,CKlBC,GLkBG,CAAC,CKlBC,CLkBb,GKlBA;AACH,ALkBA,AMIO,APAP,KMxB0B,ALkB3B,ADDA,CMjBO,CAAP,ANwBG,ICJI,GMIK,CNJD,ADHX,UOOuB,CNJD,EMII,GNJC,SAApB,EAA+B,EMI9B,EAAoC;ADrB/C,ALkBO,AMIQ,APCZ,ADSR,GOzCI,MPyCJ,ECTe,CODK,CNJD,EFcnB,EEduB,ADKF,CCLG,ADKF,ECLV,IMIoB,GAAG,IAAf,APCC,CAAb,CAduB,CAcO;ACJ7B,AMIW,APCf,ADpGL,CAAA,ECqFI,ADrFJ,SQmGoB,gBAAgB,GAAG,WAAnB;ADtBpB,ACuBiB,SDvBjB,cAAA;AAzEA,AL4FQ,AMKK,APCT,CMlGJ,CAA4C,ANkGxC,KAAA,CCNQ,ADMR,MMlGwC,CAAA,EL4FvB,ADMjB,CAAA,ECNoB,CAAhB,CK5FR,CAAA,AL4F2B,GDMvB,GAAA,CCN8B,IAAP,CAjCI,CAiCS,KDMpC;AOAK,APCD,ADOR,IAAM,OCPS,IDOE,ECPE,CDOC,ICPI,ADOA,CCPT,GAAU,EDOL,CAAW,CCPhB,ADOK,EAAc,CCPJ,ADOV,CAApB,ICPmC,CAApB,GAAqB,GAA5B;ACNA,ADOH,ADOL,GCTI,CDSE,IEdM,IFcE,GAAG,EEdI,EFcA,CEdG,KFcP,CAAW,CAAX,EAAc,CAAd,CEdT,AFcR,EEdqC,OAAO,IAAP,CAlCN,CAkCmB;AMM1C,ARSR,IAAM,MQTM,ERSE,GAAG,IAAI,GQTb,EAAkB,CRST,CAAW,CAAX,EAAc,CAAd,CAAjB;AEbQ,AMKI,APCZ,SAAA,ECNe,GDMf,CCNQ;AACH,AMKO,APxGZ,CAAA,EC8DI,AD9DJ,CCIA,CAiGI;AACA,AMGQ;AACA;AACA;ANJR,AMKQ,ENLR,IAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAc,KAAd,EAA0B;AACtB,AMKI;ANJJ,AMKI,QNLA,GAAG,GAAG,IAAI,QAAA,CAAA,OAAJ,CAAW,KAAK,EAAhB,EAAoB,KAAK,EAAzB,CAAV;AACA,AMKI,QNLA,AMKA,IAAI,GAAG,GNLG,GAAG,GAAG,CAAC,EMKjB,CNLa,CAAQ,GAAR,CAAjB;AACA,AMKC,OA/B8B,CN0B3B,AMMJ,QNNY,GAAG,GAAG,CAAC,GAAJ,CAAQ,IAAI,QAAA,CAAA,OAAJ,CAAW,KAAK,EAAhB,EAAoB,KAApB,CAAR,CAAf;AACA,AMMA,QNNI,QAAQ,KAAK,CAAb,IAAkB,QAAQ,KAAK,UAAnC,EAA+C,OAAO,IAAP,CALzB,CAMtB;AMMA;ANLA,AMMA,QNNI,QAAQ,GAAG,CAAf,EAAkB,OAAO,KAAP,CAPI,CAOU;AMOhC;ANNA,AMOA,QNPI,QAAQ,GAAG,UAAf,EAA2B,OAAO,IAAP,CARL,CAQkB;;AACxC,WAAO,KAAP;AACH,AMMG,GNhBJ,OMgBQ,MAAJ,EAAY;AACR;ANNZ,AMOY,QAAA,CNPZ,EMOe,CAAC,CNPhB,QMOY;ANrHZ,AMsHY,CNtHZ,EAAA,KMsHY,GAAG,CAAC,MAAJ,CAAW,MAAM,CAAC,CAAlB,EAAqB,MAAM,CAAC,CAA5B;AACA,QAAA,GAAG,CAAC,MAAJ,CAAW,MAAM,CAAC,CAAlB,EAAqB,MAAM,CAAC,CAA5B;AACA,QAAA,GAAG,CAAC,MAAJ,CAAW,IAAI,CAAC,CAAhB,EAAmB,IAAI,CAAC,CAAxB;AACA,QAAA,GAAG,CAAC,MAAJ,CAAW,MAAM,CAAC,CAAlB,EAAqB,MAAM,CAAC,CAA5B;AACA,QAAA,GAAG,CAAC,IAAJ;AACH,OARD,MAQO;AACH,QAAA,QAAQ,GAAG,IAAX;AACH;;AACD,MAAA,MAAM,GAAG,IAAT;AACH,KAhEkF,CAiEnF;;;AACA,IAAA,GAAG,CAAC,SAAJ;AACA,IAAA,GAAG,CAAC,MAAJ,CAAW,MAAM,CAAC,CAAlB,EAAqB,MAAM,CAAC,CAA5B;AACA,IAAA,GAAG,CAAC,MAAJ,CAAW,MAAO,CAAC,CAAnB,EAAsB,MAAO,CAAC,CAA9B;AACA,IAAA,GAAG,CAAC,MAAJ,CAAW,QAAS,CAAC,CAArB,EAAwB,QAAS,CAAC,CAAlC;AACA,IAAA,GAAG,CAAC,MAAJ,CAAW,MAAM,CAAC,CAAlB,EAAqB,MAAM,CAAC,CAA5B;AACA,IAAA,GAAG,CAAC,IAAJ;AAEA,IAAA,GAAG,CAAC,OAAJ;AACH;;AAED,EAAA,IAAI;AAEH,CAvID,GAuII","file":"main.7ebd0bc5.js","sourceRoot":"..\\src","sourcesContent":["export enum KeyboardKey {\r\n    W,\r\n    A,\r\n    S,\r\n    D,\r\n};\r\n\r\nconst keyMap: { [key: string]: KeyboardKey } = {\r\n    \"W\": KeyboardKey.W,\r\n    \"A\": KeyboardKey.A,\r\n    \"S\": KeyboardKey.S,\r\n    \"D\": KeyboardKey.D,\r\n};\r\n\r\n// TODO: Update in batches\r\n// Call a method update() on each frame and keep a copy of the arrays\r\n// Provide a wasUpdated() method to reflect changes in eky presses\r\n\r\nclass KeyboardController {\r\n\r\n    private isBind = false;\r\n    //private pressMap: number = 0;\r\n    private pressedArray: KeyboardKey[] = [];\r\n\r\n    constructor() {\r\n        console.debug(\"KeyboardController Ctor\");\r\n    }\r\n\r\n    bind() {\r\n        if (this.isBind) throw new Error(\"Keyboard bind twice\");\r\n        console.debug(\"KeyboardController bind\");\r\n        this.isBind = true;\r\n        document.addEventListener(\"keydown\", this.onKeyDown.bind(this));\r\n        document.addEventListener(\"keyup\", this.onKeyUp.bind(this));\r\n    }\r\n\r\n    isPressed(key: KeyboardKey) {\r\n        return this.pressedArray.includes(key);\r\n        //return (this.pressMap & key) > 0\r\n    }\r\n\r\n    private onKeyDown(event: KeyboardEvent) {\r\n        let key = event.key.toUpperCase();\r\n\r\n        if (typeof(keyMap[key]) !== \"undefined\") {\r\n            this.setPressed(keyMap[key]);\r\n        }\r\n    }\r\n\r\n    private onKeyUp(event: KeyboardEvent) {\r\n        let key = event.key.toUpperCase();\r\n\r\n        if (typeof(keyMap[key]) !== \"undefined\") {\r\n            this.setNotPressed(keyMap[key]);\r\n        }\r\n    }\r\n\r\n    private setPressed(key: KeyboardKey) {\r\n        let idx = this.pressedArray.indexOf(key);\r\n        if (idx >= 0) return;\r\n        this.pressedArray.push(key);\r\n        //this.pressMap |= key;\r\n    }\r\n\r\n    private setNotPressed(key: KeyboardKey) {\r\n        let idx = this.pressedArray.indexOf(key);\r\n        if (idx < 0) return;\r\n        this.pressedArray.splice(idx, 1);\r\n        //this.pressMap &= ~key;\r\n    }\r\n}\r\n\r\nconst INSTANCE = new KeyboardController();\r\n\r\nexport default INSTANCE;","export const CANVAS_WIDTH = 500;\r\nexport const CANVAS_HEIGHT = 500;\r\nexport const MAX_ROUND_ERROR = 10e-5;","import Point from \"./point\";\r\n\r\nexport default class Vector {\r\n    p1?: Point;\r\n    p2?: Nullable<Point>;\r\n\r\n    private _magnitude?: number;\r\n\r\n    // The vector is (v1, v2)\r\n    v1: number;\r\n    v2: number;\r\n    constructor(p1: Point, p2: Point);\r\n    constructor(v1: number, v2: number);\r\n    constructor(pv1: Point | number, pv2: Point | number) {\r\n        if (typeof(pv1) === \"number\") { // explicit\r\n            this.v1 = pv1 as number;\r\n            this.v2 = pv2 as number;\r\n        } else { // point constructor\r\n            this.p1 = pv1;\r\n            this.p2 = pv2 as Point;\r\n    \r\n            this.v1 = (pv2 as Point).x - (pv1 as Point).x;\r\n            this.v2 = (pv2 as Point).y - (pv1 as Point).y;\r\n        }\r\n        // return [ p2[0] - p1[0], p2[1] - p1[1] ];\r\n    }\r\n\r\n    // I don't know how to fit this into the constructor nicely\r\n    static fromRotation(size: number, rotation: number): Vector {\r\n        return new Vector(Math.cos(rotation), Math.sin(rotation)).scale(size);\r\n    }\r\n\r\n    get magnitude() {\r\n        if (!this._magnitude) {\r\n            this._magnitude = Math.sqrt(this.v1 * this.v1 + this.v2 * this.v2);\r\n        }\r\n        return this._magnitude;\r\n    }\r\n\r\n    equals(v: Vector) {\r\n        //return this.p1.equals(v.p1) && this.p2.equals(v.p2);\r\n        return this.v1 === v.v1 && this.v2 === v.v2;\r\n    }\r\n\r\n    dot(v: Vector) {\r\n        return this.v1 * v.v1 + this.v2 * v.v2;\r\n    }\r\n\r\n    rotate(angle: number) {\r\n        // Angle negative because of canvas coordinate origin...\r\n        let c = Math.cos(-angle);\r\n        let s = Math.sin(-angle);\r\n        return new Vector(c * this.v1 - s * this.v2, s * this.v1 + c * this.v2);\r\n        // x2 = cos(β)·x1 − sin(β)·y1\r\n        // y2 = sin(β)·x1 + cos(β)·y1\r\n    }\r\n\r\n    invert() {\r\n        return new Vector(-this.v1, -this.v2);\r\n    }\r\n\r\n    scale(scalar: number) {\r\n        return new Vector(this.v1 * scalar, this.v2 * scalar);\r\n    }\r\n\r\n    unit() {\r\n        if (this.magnitude === 0) return NULL_VECTOR;\r\n        return new Vector(this.v1 / this.magnitude, this.v2 / this.magnitude);\r\n    }\r\n\r\n    // clamps given a magnitude\r\n    clamp(min: number, max: number | null): Vector;\r\n    clamp(max: number): Vector;\r\n    clamp(min: number, max?: number | null) {\r\n        let lMin: number | null = min;\r\n        let lMax: number | null = max || null;\r\n        if (typeof(max) === \"undefined\") {\r\n            lMin = null;\r\n            lMax = min;\r\n        }\r\n        if (lMax !== null && this.magnitude > lMax) {\r\n            return this.unit().scale(lMax);\r\n        } else if (lMin !== null && this.magnitude < lMin) {\r\n            return this.unit().scale(lMin);\r\n        } else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    add(vector: Vector) {\r\n        return new Vector(this.v1 + vector.v1, this.v2 + vector.v2);\r\n    }\r\n\r\n    // TODO: use\r\n    // Projection of this over otherVector\r\n    projection(otherVector: Vector) {\r\n        return this.dot(otherVector) / otherVector.magnitude;\r\n    }\r\n\r\n    xComponent() {\r\n        return this.projection(X_VECTOR);\r\n    }\r\n\r\n    yComponent() {\r\n        return this.projection(Y_VECTOR);\r\n    }\r\n\r\n    toString() {\r\n        return `(${this.v1}, ${this.v2})`;\r\n    }\r\n}\r\n\r\nconst NULL_VECTOR = new Vector(0, 0);\r\nconst X_VECTOR = new Vector(1, 0);\r\nconst Y_VECTOR = new Vector(0, 1);","import Vector from \"./vector\";\r\n\r\n// Inmutable!\r\nexport default class Point {\r\n\r\n    x: number;\r\n    y: number;\r\n\r\n    constructor(x: number, y: number) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    equals(p: Point) {\r\n        return this.x === p.x && this.y === p.y;\r\n    }\r\n\r\n    distanceTo(p: Point) {\r\n        let a = p.x - this.x;\r\n        let b = p.y - this.y;\r\n        return Math.sqrt(a * a + b * b);\r\n    }\r\n\r\n    public translate(x: number, y: number): Point;\r\n    public translate(v: Vector): Point;\r\n    translate(xv: number | Vector, y?: number) {\r\n        if (xv instanceof Vector) {\r\n            return new Point(this.x + xv.v1, this.y + xv.v2);\r\n        } else {\r\n            return new Point(this.x + xv, this.y + y!);\r\n        }\r\n    }\r\n\r\n    clampX(max: number): Point;\r\n    clampX(min: number, max: number): Point;\r\n    clampX(min: number, max?: number) {\r\n        let mn: number | null = min;\r\n        if (typeof(max) === \"undefined\") {\r\n            mn = null;\r\n            max = min;\r\n        }\r\n        return this.clamp(mn, max, null, null);\r\n    }\r\n\r\n    clampY(max: number): Point;\r\n    clampY(min: number, max: number): Point;\r\n    clampY(min: number, max?: number) {\r\n        let mn: number | null = min;\r\n        if (typeof(max) === \"undefined\") {\r\n            mn = null;\r\n            max = min;\r\n        }\r\n        return this.clamp(null, null, mn, max);\r\n    }\r\n\r\n    clamp(maxX: number | null, maxY: number | null): Point;\r\n    clamp(minX: number | null, maxX: number | null, minY: number | null, maxY: number | null): Point;\r\n    clamp(minX: number | null, maxX: number | null, minY?: number | null, maxY?: number | null) {\r\n        let mnX = minX;\r\n        let mxX = maxX;\r\n        let mnY = minY;\r\n        let mxY = maxY;\r\n\r\n        let nx = this.x;\r\n        let ny = this.y;\r\n\r\n        if (typeof(minY) === \"undefined\" && typeof(maxY) === \"undefined\") {\r\n            // if just minX and maxX are present, this is a just max clamp\r\n            mnX = null;\r\n            mnY = null;\r\n            mxX = minX;\r\n            mxY = maxX;\r\n        }\r\n        if (mnX !== null && nx < mnX) {\r\n            nx = mnX;\r\n        } else if (mxX !== null && nx > mxX) {\r\n            nx = mxX;\r\n        }\r\n        if (mnY !== null && ny < mnY!) {\r\n            ny = mnY!;\r\n        } else if (mxY !== null && ny > mxY!) {\r\n            ny = mxY!;\r\n        }\r\n        return new Point(nx, ny);\r\n    }\r\n\r\n    // find closest point to this one from an array\r\n    findClosest(points: Point[]): Nullable<Point> {\r\n        if (points.length === 0) return null;\r\n        if (points.length === 1) return points[0];\r\n\r\n        let indexOfLowest = -1;\r\n        points.map(p => this.distanceTo(p)).reduce((acc, v, i) => {\r\n            if (v < acc) {\r\n                indexOfLowest = i;\r\n                return v;\r\n            } else {\r\n                return acc;\r\n            }\r\n        }, Infinity);\r\n\r\n        return points[indexOfLowest]; // point or null\r\n    }\r\n\r\n    toString() {\r\n        return `(${this.x}, ${this.y})`;\r\n    }\r\n}","import Point from \"./point\";\r\nimport Vector from \"./vector\";\r\nimport { MAX_ROUND_ERROR } from \"./constants\";\r\n\r\nconst POINT_DELTA = 1;\r\n\r\n// Should be segment?\r\nexport default class Line {\r\n\r\n    p1: Point;\r\n    p2: Point;\r\n    m: number | null;\r\n    n: number;\r\n\r\n    constructor(p1: Point, p2: Point) {\r\n        this.p1 = p1;\r\n        this.p2 = p2;\r\n        if (Math.abs(p2.x - p1.x) < MAX_ROUND_ERROR) {\r\n            // line is x = N\r\n            this.m = null;\r\n            this.n = p1.x;\r\n        } else {\r\n            this.m = (p2.y - p1.y) / (p2.x - p1.x);\r\n            this.n = p1.y - (this.m * p1.x);\r\n        }\r\n    }\r\n\r\n    // Checks if lines collide without checking segment boundaries\r\n    private collisionWithUnlimited(line: Line): Nullable<Point> {\r\n        /* cases:\r\n            normal: m != null && m != 0\r\n            2 of x = n (m === null)\r\n            2 of y = n (m === 0)\r\n            1 normal, 1 of x = n\r\n            1 normal, 1 of y = n\r\n            1 of x = n, 1 of y = n => point is [x,y]\r\n            cases of y = n can be treated as normal so we got special cases for:\r\n            2 of x = n => since m1 = null & m2 = null they go through \"same line\" branch (todo pending)\r\n            1 of x = n and 1 normal => we check!\r\n    \r\n        */\r\n        if (this.m === line.m) {\r\n            return null; // nunca se cruzan \r\n            // TODO: o son la misma!!!!!\r\n        } else if (this.m === null || line.m === null) { // any x = n???\r\n            // we treat line as x = n\r\n            let line1: Line = this;\r\n            let line2 = line;\r\n            if (line1.m === null) { // so we swap if necessary\r\n                let l = line2;\r\n                line2 = this;\r\n                line1 = l;\r\n            }\r\n            let x = line2.n; // okay...\r\n            let y = x * line1.m! + line1.n; // okay!\r\n            return new Point(x, y);\r\n        } else {\r\n            let x = (line.n - this.n) / (this.m - line.m);\r\n            let y = x * this.m + this.n;\r\n            return new Point(x, y);;\r\n        }\r\n    }\r\n\r\n    // line1 = { p1, p2 } -- line2 = { p3, p4}\r\n    // p1 = this.p1; p2 = this.p2; p3 = line.p1; p4 = line.p2\r\n    collidesWithLine(line: Line): Nullable<Point> {\r\n\r\n        let coll = this.collisionWithUnlimited(line);\r\n        if (!coll) return null;\r\n\r\n        // CHECK:\r\n        // what if dotPoint = 0 || dotPoint1 = dotSegment1\r\n        // but not in the other segment...?\r\n        // i think this wrong somehow\r\n\r\n        // is coll in segment1 and segment2?\r\n        let v1 = new Vector(this.p1, this.p2);\r\n        let dotSegment1 = v1.dot(v1);\r\n        let dotPoint1 = v1.dot(new Vector(this.p1, coll));\r\n        // if (dotPoint1 === 0) {\r\n        //     // coll = p1\r\n        //     // Because of JS float aproximations (and vectorEquals not including a delta for float aproximation)\r\n        //     // we check here and just return p1 as the coll point\r\n        //     return this.p1;\r\n        // } else if (dotPoint1 === dotSegment1) { // what if dotPoint1 ≈ dogSegment1? May return false negatives\r\n        //     return this.p2;\r\n        // }\r\n        if (dotPoint1 < 0) return null; // does not belong to segment1, so can't be valid\r\n        if (dotPoint1 > dotSegment1) return null; // does not belong to segment1, so coll is not valid\r\n\r\n        let v2 = new Vector(line.p1, line.p2);\r\n        let dotSegment2 = v2.dot(v2);\r\n        let dotPoint2 = v2.dot(new Vector(line.p1, coll));\r\n        if (dotPoint2 === 0) {\r\n            return line.p1;\r\n        } else if (dotSegment2 === dotPoint2) {\r\n            return line.p2;\r\n        }\r\n        if (dotPoint2 < 0) return null; // does not belong to segment2, so can't be valid\r\n        if (dotPoint2 < dotSegment2) return coll; // belongs segment2 (and belongs to segment1 because of dotPoint < dotSegment1)\r\n\r\n        return null;\r\n    }\r\n\r\n    // Makes sure point is WITHIN the segment defined between p1 and p2\r\n    // check /collidesWithLine/\r\n    containsPoint(point: Point): boolean {\r\n        // is coll in segment1 and segment2?\r\n        let vec = new Vector(this.p1, this.p2);\r\n        let dotSegment = vec.dot(vec);\r\n        let dotPoint = vec.dot(new Vector(this.p1, point));\r\n        if (dotPoint === 0 || dotPoint === dotSegment) return true;\r\n        //if (Math.abs(dotPoint) <= POINT_DELTA || Math.abs(dotPoint - dotSegment) <= POINT_DELTA) return true;\r\n        if (dotPoint < 0) return false; // does not belong to segment1, so can't be valid\r\n        if (dotPoint < dotSegment) return true; // does not belong to segment1, so coll is not valid\r\n        return false;\r\n    }\r\n}","import Line from \"../line\";\r\nimport Point from \"../point\";\r\nimport IElem2D from \"../interfaces/ielem2d\";\r\n\r\nexport default abstract class Geometry2D implements IElem2D {\r\n\r\n    constructor() {}\r\n\r\n    logic(delta: number) {};\r\n\r\n    abstract draw(ctx: CanvasRenderingContext2D): void;\r\n    abstract collidesWithLine(line: Line): Nullable<Point>;\r\n}","import Elem2D from \"../interfaces/ielem2d\";\r\nimport Point from \"../point\";\r\nimport Line from \"../line\";\r\nimport Geometry2D from \"./geometry2d\";\r\n\r\nexport default class Square extends Geometry2D implements Elem2D {\r\n\r\n    origin: Point;\r\n    width: number;\r\n    height: number;\r\n\r\n    // cached segment lines\r\n    tl: Line; // top \r\n    rl: Line; // right\r\n    bl: Line; // bottom\r\n    ll: Line; // left\r\n\r\n    constructor(origin: Point, width: number, height: number) {\r\n        super();\r\n\r\n        this.origin = origin\r\n        this.width = width;\r\n        this.height = height;\r\n\r\n        let ptl = this.origin;\r\n        let ptr = this.origin.translate(this.width, 0);\r\n        let pbl = this.origin.translate(0,          this.height);\r\n        let pbr = this.origin.translate(this.width, this.height);\r\n\r\n        this.tl = new Line(ptl, ptr);\r\n        this.rl = new Line(ptr, pbr);\r\n        this.bl = new Line(pbl, pbr);\r\n        this.ll = new Line(ptl, pbl);\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n\r\n        ctx.strokeStyle = \"#0FF\";\r\n        ctx.strokeRect(this.origin.x, this.origin.y, this.width, this.height);\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    collidesWithLine(line: Line) {\r\n        // p1 y p2 es un timo!\r\n        // hits any line hitting the square?\r\n        let hp: Nullable<Point>[] = [null, null, null, null];\r\n        hp[0] = line.collidesWithLine(this.tl);\r\n        hp[1] = line.collidesWithLine(this.rl);\r\n        hp[2] = line.collidesWithLine(this.bl);\r\n        hp[3] = line.collidesWithLine(this.ll);\r\n        // Hay que devolver uno de los puntos de colisión...\r\n        // Vamos a devolver el más cercano a line.p1... por si acaso (uwu)\r\n        return line.p1.findClosest(hp.filter((p: Nullable<Point>): p is Point => {\r\n            return p !== null;\r\n        }));\r\n    }\r\n}","import Elem2D from \"../interfaces/ielem2d\";\r\nimport Point from \"../point\";\r\nimport Line from \"../line\";\r\nimport Vector from \"../vector\";\r\nimport Geometry2D from \"./geometry2d\";\r\n\r\nexport default class Circle extends Geometry2D implements Elem2D {\r\n\r\n    center: Point;\r\n    r: number;\r\n\r\n    constructor(center: Point, r: number) {\r\n        super();\r\n\r\n        this.center = center;\r\n        this.r = r;\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n\r\n        ctx.strokeStyle = \"#00F\";\r\n        ctx.beginPath();\r\n        ctx.arc(this.center.x, this.center.y, this.r, 0, 2 * Math.PI);\r\n        ctx.stroke();\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    collidesWithLine(line: Line) {\r\n        // Line goes from A to B\r\n        // Circle centers at C\r\n        // We calculate AC projection onto AB and then translate A over AB for the projection amount\r\n        // Then we take C and that point and measure the distance\r\n\r\n        // θ = angle(AB, AC) - L = A·cosθ and since AB.AC = |AB||AC|cosθ => L = AB.AC / |AC|\r\n        let vec_ab = new Vector(line.p1, line.p2);\r\n        let line_unit = vec_ab.unit();\r\n        let vec_ac = new Vector(line.p1, this.center);\r\n        let proj = vec_ab.dot(vec_ac) / vec_ab.magnitude;\r\n\r\n        let point = line.p1.translate(line_unit.scale(proj));\r\n\r\n        let d = this.center.distanceTo(point);\r\n\r\n        if (d > this.r) return null;\r\n\r\n        // if d = this.r then line is tangent\r\n        // will use a differential for aprox issues\r\n        if (Math.abs(d - this.r) < 3 && line.containsPoint(point)) return point; // d ≈ this.r so return point\r\n\r\n        // here d < this.r so there's two cross points\r\n\r\n        // So we pythagoras to calculate translation of the orthogonal point\r\n        // and translate both ways thorough \\line\\\r\n        // r2 = d2 + t2\r\n        let translation = Math.sqrt(this.r * this.r - d * d);\r\n        let candidate1 = point.translate(line_unit.scale(translation));\r\n        let candidate2 = point.translate(line_unit.scale(-translation));\r\n\r\n        return line.p1.findClosest([ candidate1, candidate2 ].filter(p => line.containsPoint(p)));\r\n    }\r\n}","import kb, { KeyboardKey } from \"./keyboardController\";\r\nimport IElem2D from \"./interfaces/ielem2d\";\r\nimport Point from \"./point\";\r\nimport Line from \"./line\";\r\nimport Vector from \"./vector\";\r\nimport { CANVAS_WIDTH, CANVAS_HEIGHT } from \"./constants\";\r\nconst VECTOR_ZERO = new Vector(0, 0);\r\nconst VECTOR_UP = new Vector(0, -1);\r\nconst VECTOR_RIGHT = new Vector(1, 0);\r\nconst VECTOR_DOWN = new Vector(0, 1);\r\nconst VECTOR_LEFT = new Vector(-1, 0);\r\n\r\nconst CHAR_SIZE = 5; // must be odd\r\nconst CHAR_SIZE_OFFSET = (CHAR_SIZE - 1) / 2;\r\nconst SPEED = 10;\r\n\r\n\r\nexport default class Character implements IElem2D {\r\n\r\n    position: Point;\r\n    acceleration: Vector;\r\n    speed: Vector;\r\n\r\n    constructor(position: Point) {\r\n        this.position = position;\r\n        this.acceleration = VECTOR_ZERO;\r\n        this.speed = VECTOR_ZERO;\r\n    }\r\n\r\n    logic(delta: number): void {\r\n\r\n        let spd = VECTOR_ZERO;\r\n        if (kb.isPressed(KeyboardKey.W)) {\r\n            spd = spd.add(VECTOR_UP);\r\n        }\r\n        if (kb.isPressed(KeyboardKey.D)) {\r\n            spd = spd.add(VECTOR_RIGHT);\r\n        }\r\n        if (kb.isPressed(KeyboardKey.S)) {\r\n            spd = spd.add(VECTOR_DOWN);\r\n        }\r\n        if (kb.isPressed(KeyboardKey.A)) {\r\n            spd = spd.add(VECTOR_LEFT);\r\n        }\r\n        this.speed = spd.unit().scale(SPEED);\r\n\r\n        this.position = this.position\r\n                            .translate(this.speed)\r\n                            .clamp(\r\n                                CHAR_SIZE_OFFSET,\r\n                                CANVAS_WIDTH - CHAR_SIZE_OFFSET,\r\n                                CHAR_SIZE_OFFSET,\r\n                                CANVAS_HEIGHT - CHAR_SIZE_OFFSET\r\n                            );\r\n    }    \r\n    \r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.fillStyle = \"#000\";\r\n        ctx.fillRect( this.position.x - CHAR_SIZE_OFFSET, this.position.y - CHAR_SIZE_OFFSET, CHAR_SIZE, CHAR_SIZE);\r\n    \r\n        ctx.fillStyle = \"#0FF\";\r\n        ctx.fillRect(this.position.x, this.position.y, 1, 1);\r\n    }\r\n\r\n    collidesWithLine(line: Line) {\r\n        return null;\r\n    }\r\n\r\n\r\n}","import Geometry2D from \"./geometry2d\";\r\nimport IElem2D from \"~js/interfaces/ielem2d\";\r\nimport Line from \"~js/line\";\r\nimport Point from \"~js/point\";\r\nimport Vector from \"~js/vector\";\r\n\r\nexport default class RegularPolygon extends Geometry2D implements IElem2D {\r\n\r\n    center: Point;\r\n    sides: number;\r\n    sideLength: number;\r\n    rotation: number;\r\n\r\n    lines: Line[];\r\n\r\n    constructor(center: Point, sides: number, sideLength: number, rotation: number) {\r\n        super();\r\n\r\n        if (sides < 3) {\r\n            throw new Error(\"Polygons must have at least 3 sides\");\r\n        }\r\n\r\n        this.center     = center;\r\n        this.sides      = sides;\r\n        this.sideLength = sideLength;\r\n        this.rotation   = rotation;\r\n        this.lines = [];\r\n\r\n        // we find the points that make the polygon and join them by lines\r\n        // start from center and calculate half height and displace center that amount\r\n        // plus half a side in the other axis\r\n        let sideAngle = Math.PI * (this.sides - 2) / this.sides;\r\n\r\n        let point = this.center\r\n            .translate(\r\n                -this.sideLength / 2,\r\n                -this.sideLength / ( 2 * Math.tan(Math.PI / this.sides) )\r\n            );\r\n\r\n        let vector = new Vector(this.sideLength, 0);\r\n        let rotationAngle = Math.PI - sideAngle; // The rotation happens on the angle OUTSIDE of the figure\r\n        \r\n        // then we get the next by creating a vector of length sideLength and angle sideAngle*N\r\n        while (this.lines.length < this.sides) {\r\n            let nextPoint = point.translate(vector);\r\n            this.lines.push(new Line(point, nextPoint));\r\n\r\n            // Update values\r\n            point = nextPoint;\r\n            vector = vector.rotate(-rotationAngle); // Negative because coordinate origin of canvas (this should be abstracted away :])\r\n        }\r\n    }\r\n\r\n    draw(ctx: CanvasRenderingContext2D) {\r\n        ctx.save();\r\n\r\n        ctx.strokeStyle = \"#ce033a\";\r\n\r\n        ctx.beginPath();\r\n        ctx.moveTo(this.lines[0].p1.x, this.lines[0].p1.y);\r\n        for (let i = 1; i < this.lines.length; i++) {\r\n            ctx.lineTo(this.lines[i].p1.x, this.lines[i].p1.y);\r\n        }\r\n        ctx.lineTo(this.lines[0].p1.x, this.lines[0].p1.y);\r\n        ctx.stroke();\r\n\r\n        ctx.restore();\r\n    }\r\n    \r\n    collidesWithLine(line: Line) {\r\n        // p1 y p2 es un timo!\r\n        // hits any line hitting the square?\r\n        let hp: Nullable<Point>[] = this.lines.map(l => line.collidesWithLine(l));\r\n        // Hay que devolver uno de los puntos de colisión...\r\n        // Vamos a devolver el más cercano a line.p1... por si acaso (uwu)\r\n        return line.p1.findClosest(hp.filter((p: Nullable<Point>): p is Point => {\r\n            return p !== null;\r\n        }));\r\n    }\r\n}","import kbController from \"./keyboardController\";\r\nimport { CANVAS_WIDTH, CANVAS_HEIGHT } from \"./constants\";\r\nimport Square from \"./geometry/square\";\r\n// import Circle from \"./circle\";\r\nimport Point from \"./point\";\r\nimport Vector from \"./vector\";\r\nimport Line from \"./line\";\r\nimport Circle from \"./geometry/circle\";\r\nimport Character from \"./character\";\r\nimport RegularPolygon from \"./geometry/regularPolygon\";\r\n\r\nconst ANIM = true;\r\n\r\nwindow.addEventListener(\"load\", function() {\r\nconsole.debug(\"Init main\");\r\n\r\nkbController.bind();\r\n\r\nlet canvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\r\nlet ctx = canvas.getContext(\"2d\")!;\r\n\r\n\r\nlet prevTime = -1;\r\n\r\nconst CHAR = new Character(new Point(150, 150));\r\n\r\nconst MAP = [\r\n    new Square(new Point(200, 200), 100, 100),\r\n    new Circle(new Point(100, 100), 50),\r\n    new RegularPolygon(new Point(300, 100), 6, 20, 0),\r\n    CHAR,\r\n];\r\n\r\nfunction init() {\r\n    window.requestAnimationFrame(draw);\r\n}\r\n\r\nfunction draw(time: number) {\r\n    let delta = 0;\r\n    if (prevTime > 0) {\r\n        delta = time - prevTime;\r\n    }\r\n    prevTime = time;\r\n\r\n    for (let object of MAP) {\r\n        object.logic(delta);\r\n    }\r\n\r\n\r\n    ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n\r\n    ctx.save();\r\n\r\n    // background\r\n    // ctx.fillStyle = \"#DDD\";\r\n    // ctx.strokeStyle = \"#000\";\r\n    // ctx.lineWidth = 10;\r\n    // ctx.strokeRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);\r\n    // ctx.restore();\r\n\r\n    for (let figure of MAP) {\r\n        figure.draw(ctx);\r\n    }\r\n    // raycast\r\n    raycast(CHAR.position, 360, 200);\r\n\r\n    if (ANIM) window.requestAnimationFrame(draw);\r\n}\r\n\r\n// 3 <= rayCount <= 360;\r\nfunction raycast(origin: Point, rayCount: number, raySize: number, firstVector?: Vector) {\r\n    if (!firstVector) {\r\n        firstVector = new Vector(1, 0);\r\n    }\r\n    // firstvector must be unitvector\r\n    ctx.save();\r\n    ctx.strokeStyle = \"#0F05\";\r\n    ctx.lineWidth = 1;\r\n    ctx.fillStyle = \"rgba(100, 100, 100, 0.5)\";\r\n\r\n    let angle = 2 * Math.PI / rayCount;\r\n\r\n    let firstEnd = null;\r\n    let rayEnd = null;\r\n    for (let i = 0; i < rayCount; i++) {\r\n        let thisAngle = i * angle;\r\n        // TODO: No recalcular cos/sin... dado que es el mismo angulo se puede calcular 1 vez\r\n        let vector = firstVector.rotate(thisAngle);\r\n        let dest = origin.translate(vector.scale(raySize)).clamp(CANVAS_WIDTH, CANVAS_HEIGHT);\r\n\r\n        // collisions?\r\n        let collidedDest: Nullable<Point> = null;\r\n        let collidedDistance = Infinity;\r\n        for (let object of MAP) {\r\n            if (object === CHAR) continue;\r\n            let coll = object.collidesWithLine(new Line(origin, dest));\r\n            if (coll) {\r\n                // ¿Is the closest collision?\r\n                let newCollDist = origin.distanceTo(coll);\r\n                if (newCollDist < collidedDistance) {\r\n                    collidedDest = coll;\r\n                    collidedDistance = newCollDist;\r\n                }\r\n            }\r\n        }\r\n        if (collidedDest) {\r\n            // draw failed ray\r\n            // ctx.save();\r\n            // ctx.beginPath();\r\n            // ctx.strokeStyle = \"#F00\";\r\n            // ctx.moveTo(collidedDest.x, collidedDest.y);\r\n            // ctx.lineTo(dest.x, dest.y);\r\n            // ctx.stroke();\r\n            // ctx.restore();\r\n            dest = collidedDest;\r\n        }\r\n        // draw correct ray\r\n        // ctx.beginPath();\r\n        // ctx.moveTo(origin.x, origin.y);\r\n        // ctx.lineTo(dest.x, dest.y);\r\n        // ctx.stroke();\r\n        // draw zones in ray\r\n        if (rayEnd) {\r\n            // draw vision zone\r\n            ctx.beginPath();\r\n            ctx.moveTo(origin.x, origin.y);\r\n            ctx.lineTo(rayEnd.x, rayEnd.y);\r\n            ctx.lineTo(dest.x, dest.y);\r\n            ctx.lineTo(origin.x, origin.y);\r\n            ctx.fill();\r\n        } else {\r\n            firstEnd = dest;\r\n        }\r\n        rayEnd = dest;\r\n    }\r\n    // another one to fill from first to last\r\n    ctx.beginPath();\r\n    ctx.moveTo(origin.x, origin.y);\r\n    ctx.lineTo(rayEnd!.x, rayEnd!.y);\r\n    ctx.lineTo(firstEnd!.x, firstEnd!.y);\r\n    ctx.lineTo(origin.x, origin.y);\r\n    ctx.fill();\r\n\r\n    ctx.restore();\r\n}\r\n\r\ninit();\r\n    \r\n}); // window load"]}